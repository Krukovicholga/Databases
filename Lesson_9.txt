
ЗАДАНИЕ № 1


SELECT * FROM shop.users;
SELECT * FROM sample.users;

START TRANSACTION;
  INSERT INTO sample.users SELECT * FROM shop.users WHERE id = 1;
  DELETE FROM shop.users WHERE id = 1;
COMMIT;

_______________________________________________________________________


ЗАДАНИЕ № 2


CREATE OR REPLACE VIEW products_catalogs AS
SELECT
  p.name AS product,
  c.name AS catalog
FROM
  products AS p
JOIN
  catalogs AS c
ON
  p.catalog_id = c.id;

SELECT * FROM products_catalogs;

product                |catalog          |
-----------------------|-----------------|
Intel Core i3-8100     |Процессоры       |
Intel Core i5-7400     |Процессоры       |
AMD FX-8320E           |Процессоры       |
AMD FX-8320            |Процессоры       |
ASUS ROG MAXIMUS X HERO|Материнские платы|
Gigabyte H310M S2H     |Материнские платы|
MSI B250M GAMING PRO   |Материнские платы|

_______________________________________________________________________


ЗАДАНИЕ № 3


CREATE TABLE IF NOT EXISTS posts (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  created_at DATE NOT NULL
);

INSERT INTO posts VALUES
(NULL, 'первая запись', '2018-08-01'),
(NULL, 'вторая запись', '2018-08-04'),
(NULL, 'третья запись', '2018-08-16'),
(NULL, 'четвертая запись', '2018-08-17');

CREATE TEMPORARY TABLE last_days (
  day INT
);

INSERT INTO last_days VALUES
(0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (10),
(11), (12), (13), (14), (15), (16), (17), (18), (19), (20),
(21), (22), (23), (24), (25), (26), (27), (28), (29), (30);

SELECT
  DATE(DATE('2018-08-31') - INTERVAL l.day DAY) AS day,
  NOT ISNULL(p.name) AS order_exist
FROM
  last_days AS l
LEFT JOIN
  posts AS p
ON
  DATE(DATE('2018-08-31') - INTERVAL l.day DAY) = p.created_at
ORDER BY
  day;
  
  
  
 day       |order_exist
----------|-----------
2018-08-01|          1
2018-08-02|          0
2018-08-03|          0
2018-08-04|          1
2018-08-05|          0
2018-08-06|          0
2018-08-07|          0
2018-08-08|          0
2018-08-09|          0
2018-08-10|          0
2018-08-11|          0
2018-08-12|          0
2018-08-13|          0
2018-08-14|          0
2018-08-15|          0
2018-08-16|          1
2018-08-17|          1
2018-08-18|          0
2018-08-19|          0
2018-08-20|          0
2018-08-21|          0
2018-08-22|          0
2018-08-23|          0
2018-08-24|          0
2018-08-25|          0
2018-08-26|          0
2018-08-27|          0
2018-08-28|          0
2018-08-29|          0
2018-08-30|          0
2018-08-31|          0 


_______________________________________________________________________


ЗАДАНИЕ № 4


DROP TABLE IF EXISTS posts;
CREATE TABLE IF NOT EXISTS posts (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  created_at DATE NOT NULL
);

INSERT INTO posts VALUES
(NULL, 'первая запись', '2018-11-01'),
(NULL, 'вторая запись', '2018-11-02'),
(NULL, 'третья запись', '2018-11-03'),
(NULL, 'четвертая запись', '2018-11-04'),
(NULL, 'пятая запись', '2018-11-05'),
(NULL, 'шестая запись', '2018-11-06'),
(NULL, 'седьмая запись', '2018-11-07'),
(NULL, 'восьмая запись', '2018-11-08'),
(NULL, 'девятая запись', '2018-11-09'),
(NULL, 'десятая запись', '2018-11-10');

DELETE
  posts
FROM
  posts
JOIN
 (SELECT
    created_at
  FROM
    posts
  ORDER BY
    created_at DESC
  LIMIT 5, 1) AS delpst
ON
  posts.created_at <= delpst.created_at;

SELECT * FROM posts;


id|name          |created_at|
--|--------------|----------|
 6|шестая запись |2018-11-06|
 7|седьмая запись|2018-11-07|
 8|восьмая запись|2018-11-08|
 9|девятая запись|2018-11-09|
10|десятая запись|2018-11-10|


_______________________________________________________________________

ХРАНИМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

ЗАДАНИЕ № 1

DELIMITER //

CREATE TRIGGER validate_name_description_insert BEFORE INSERT ON products
FOR EACH ROW BEGIN
  IF NEW.name IS NULL AND NEW.description IS NULL THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Both name and description are NULL';
  END IF;
END//

INSERT INTO products
  (name, description, price, catalog_id)
VALUES
  (NULL, NULL, 9360.00, 2)//

INSERT INTO products
  (name, description, price, catalog_id)
VALUES
  ('ASUS PRIME Z370-P', 'HDMI, SATA3, PCI Express 3.0,, USB 3.1', 9360.00, 2)//

INSERT INTO products
  (name, description, price, catalog_id)
VALUES
  (NULL, 'HDMI, SATA3, PCI Express 3.0,, USB 3.1', 9360.00, 2)//

CREATE TRIGGER validate_name_description_update BEFORE UPDATE ON products
FOR EACH ROW BEGIN
  IF NEW.name IS NULL AND NEW.description IS NULL THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Both name and description are NULL';
  END IF;
END//

+---------------------+-----------------------+
| NOW()               | hello ()              |
+---------------------+-----------------------+
| 2020-06-01 16:51:22 | Добрый день           |
+---------------------+-----------------------+
1 row in set (0,00 sec)


_______________________________________________________________________


ЗАДАНИЕ № 2


DELIMITER //

CREATE TRIGGER validate_name_description_insert BEFORE INSERT ON products
FOR EACH ROW BEGIN
  IF NEW.name IS NULL AND NEW.desription IS NULL THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Both name and description are NULL';
  END IF;
END//

INSERT INTO products
  (name, desription, price, catalog_id)
VALUES
  (NULL, NULL, 9360.00, 2)//
  
  ERROR 1644 (45000): Both name and description are NULL


INSERT INTO products
  (name, desription, price, catalog_id)
VALUES
  ('ASUS PRIME Z370-P', 'HDMI, SATA3, PCI Express 3.0,, USB 3.1', 9360.00, 2)//

INSERT INTO products
  (name, desription, price, catalog_id)
VALUES
  (NULL, 'HDMI, SATA3, PCI Express 3.0,, USB 3.1', 9360.00, 2)//

CREATE TRIGGER validate_name_description_update BEFORE UPDATE ON products
FOR EACH ROW BEGIN
  IF NEW.name IS NULL AND NEW.desription IS NULL THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Both name and description are NULL';
  END IF;
END//

*В моей базе shop опечатка в названии столбца- desription.

_______________________________________________________________________


ЗАДАНИЕ № 3

DELIMITER //

CREATE FUNCTION FIBONACCI(num INT)
RETURNS INT DETERMINISTIC
BEGIN
  DECLARE fs DOUBLE;
  SET fs = SQRT(5);

  RETURN (POW((1 + fs) / 2.0, num) + POW((1 - fs) / 2.0, num)) / fs;
END//

SELECT FIBONACCI(10)//

+---------------+
| FIBONACCI(10) |
+---------------+
|            55 |
+---------------+
1 row in set (0,00 sec)

